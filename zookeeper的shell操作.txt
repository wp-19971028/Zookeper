连接客户端
zkCli.sh -server node1:2181,node2:2181,node3:2181

创建节点
#创建节点的格式
create -s -e /wangping node1:7077
#-s :序列化
#-e :是临时节点，如果客户端消失就没有了
#创建永久节点
create /hadoop node2:50070
读取节点
create /wangping node1:5221
#读取节点的内容
[zk: node1:2181,node2:2181,node3:2181(CONNECTED) 4] get /wangping
获取的结果是
node1:5221  # 当前节点的内容
cZxid = 0x40000000a  # 当前事务ID
ctime = Fri Apr 30 19:58:33 CST 2021  # 创建时间
mZxid = 0x40000000a 修改事务ID
mtime = Fri Apr 30 19:58:33 CST 2021 # 最后修改时间
pZxid = 0x40000000a
cversion = 0   # 版本号
dataVersion = 0  # 数据版本
aclVersion = 0  # 控制权限版本
ephemeralOwner = 0x0 
dataLength = 10  # 数据长度
numChildren = 0  # 子节点个数

#获取当前的路径
[zk: node1:2181,node2:2181,node3:2181(CONNECTED) 3] ls /wangping
获取的结果是
[]   # 当前子目录的列表,如果是[] 代表没有子目录
#获取当前路径的详细信息
[zk: node1:2181,node2:2181,node3:2181(CONNECTED) 4] ls2 /wangping
[]
cZxid = 0x40000000a
ctime = Fri Apr 30 19:58:33 CST 2021
mZxid = 0x40000000a
mtime = Fri Apr 30 19:58:33 CST 2021
pZxid = 0x40000000a
cversion = 0
dataVersion = 0
aclVersion = 0
ephemeralOwner = 0x0
dataLength = 10
numChildren = 0

更新节点
# 格式 set path data
set /wangping host:node1,port:2181
[zk: node1:2181,node2:2181,node3:2181(CONNECTED) 5] set /wangping host:node1,port:2181
cZxid = 0x40000000a
ctime = Fri Apr 30 19:58:33 CST 2021
mZxid = 0x40000000b
mtime = Fri Apr 30 20:12:16 CST 2021
pZxid = 0x40000000a
cversion = 0
dataVersion = 1
aclVersion = 0
ephemeralOwner = 0x0
dataLength = 20
numChildren = 0

[zk: node1:2181,node2:2181,node3:2181(CONNECTED) 6] get /wangping
host:node1,port:2181
cZxid = 0x40000000a
ctime = Fri Apr 30 19:58:33 CST 2021
mZxid = 0x40000000b
mtime = Fri Apr 30 20:12:16 CST 2021
pZxid = 0x40000000a
cversion = 0
dataVersion = 1
aclVersion = 0
ephemeralOwner = 0x0
dataLength = 20
numChildren = 0

删除节点
# 删除节点 delete path
# 如果 wangping 下没有子目录就可以直接删除
delete /wangping
# 递归删除节点 rmr path  如果有子目录
rmr /wangping

[zk: node1:2181,node2:2181,node3:2181(CONNECTED) 8] delete /wangping
[zk: node1:2181,node2:2181,node3:2181(CONNECTED) 9] ls /
[zookeeper, yarn-leader-election, hadoop-ha, hbase, rmstore]

设置节点的限制quota
create -s -e /spark node1:7077
# 设置节点大小或者长度的限制
setquota -n 2 /wangping
setquota -b 10 /wangping

[zk: node1:2181,node2:2181,node3:2181(CONNECTED) 2] create -s -e /wangping node1:3456
Created /wangping0000000011
[zk: node1:2181,node2:2181,node3:2181(CONNECTED) 3] setquota -n 2 /wangping0000000011
Comment: the parts are option -n val 2 path /wangping0000000011

[zk: node1:2181,node2:2181,node3:2181(CONNECTED) 5] setquota -b 50 /wangping0000000011
Comment: the parts are option -b val 50 path /wangping0000000011
Command failed: java.lang.IllegalArgumentException: /wangping0000000011 has a parent /zookeeper/quota/wangping0000000011 which has a quota

	如果当前显示的字节长度为 -1 ，代表当前的数据没有限制
删除当前分配限额
delquota -n /wangping0000000011
#查看当前限额
listquota /wangping0000000011

[zk: node1:2181,node2:2181,node3:2181(CONNECTED) 6] delquota -n /wangping0000000011
[zk: node1:2181,node2:2181,node3:2181(CONNECTED) 7] listquota /wangping0000000011
absolute path is /zookeeper/quota/wangping0000000011/zookeeper_limits
Output quota for /wangping0000000011 count=-1,bytes=-1
Output stat for /wangping0000000011 count=1,bytes=10

查看历史设置的命令
history

[zk: node1:2181,node2:2181,node3:2181(CONNECTED) 8] history
0 - ls /
1 - delete /wangping0000000010
2 - create -s -e /wangping node1:3456
3 - setquota -n 2 /wangping0000000011
4 - setquota -b 10 /wangping0000000011
5 - setquota -b 50 /wangping0000000011
6 - delquota -n /wangping0000000011
7 - listquota /wangping0000000011
8 - history

Zookeeper 的监听 watch 机制
# 指定监听目录
get /wangping0000000011 watch
# 改变监听的目录
set /wangping0000000011 abcdefg
# 拿到节点变化的通知
WatchedEvent state:SyncConnected type:NodeDataChanged path:/hadoop

[zk: node1:2181,node2:2181,node3:2181(CONNECTED) 9] get /wangping0000000011 watch
node1:3456
cZxid = 0x40000001a
ctime = Fri Apr 30 23:29:05 CST 2021
mZxid = 0x40000001a
mtime = Fri Apr 30 23:29:05 CST 2021
pZxid = 0x40000001a
cversion = 0
dataVersion = 0
aclVersion = 0
ephemeralOwner = 0x3792295c9780000
dataLength = 10
numChildren = 0

[zk: node1:2181,node2:2181,node3:2181(CONNECTED) 10] set /wangping0000000011 abcdefg

WATCHER::

WatchedEvent state:SyncConnected type:NodeDataChanged path:/wangping0000000011
cZxid = 0x40000001a
ctime = Fri Apr 30 23:29:05 CST 2021
mZxid = 0x40000001f
mtime = Fri Apr 30 23:35:14 CST 2021
pZxid = 0x40000001a
cversion = 0
dataVersion = 1
aclVersion = 0
ephemeralOwner = 0x3792295c9780000
dataLength = 7
numChildren = 0

总结
1. 客户端向服务器注册 watch
2. 服务器事件如果发生了改变的watch
3. 客户端回调watch得到事件变化通知

Watch机制特点

一次性触发

事件发生触发监听，一个watcher event就会被发送到设置监听的客户端，这种效果是一次性的，后续再次发生同样的事件，不会再次触发。

事件封装

ZooKeeper使用WatchedEvent对象来封装服务端事件并传递。

WatchedEvent包含了每一个事件的三个基本属性：

通知状态（keeperState），事件类型（EventType）和节点路径（path）

event异步发送

watcher的通知事件从服务端发送到客户端是异步的。

先注册再触发

Zookeeper中的watch机制，必须客户端先去服务端注册监听，这样事件发送才会触发监听，通知给客户端。



