1. Zookeeper 基本知识
	Zookeeper是一个分布式协调服务的开源框架。
	主要用来解决分布式集群中应用系统的一致性问题。
	ZooKeeper本质上是一个小文件存储系统。
	提供基于类似于文件系统的目录树方式的数据存储，
	并且可以对树中的节点进行有效管理。
	从而用来维护和监控你存储的数据的状态变化。
	通过监控这些数据状态的变化，从而可以达到基于数据的集群管理。
2. ZooKeeper特性
	1.全局数据一致：集群中每个服务器保存一份相同的数据副本，
		client无论连接到哪个服务器，展示的数据都是一致的，这是最重要的特征；
	2.可靠性：如果消息被其中一台服务器接受，那么将被所有的服务器接受。
	3.顺序性：包括全局有序和偏序两种：
	全局有序是指:如果在一台服务器上消息a在消息b前发布，则在所有Server上消息a都将在消息b前被发布；
	偏序是指:如果一个消息b在消息a后被同一个发送者发布，a必将排在b前面。
	4.数据更新原子性：一次数据更新要么成功（半数以上节点成功），要么失败，不存在中间状态；
	5.实时性：Zookeeper保证客户端将在一个时间间隔范围内获得服务器的更新信息，或者服务器失效的信息。
		follower 	 leader__写_follower
		 ______  	 ______   	|_______
		|      | 	|      | 	|       |
		|      | 	|      | 	|       |   
		|server| 	|server| 	|server |
		|      | 	|      | 	|       |
		|______| 	|______| 	|_______|
		 |读		     |读 	     |读
	     ____|	    	 ____|		   ____|
	    |	 |      	|    |        	  |    |
	    |____|      	|____|            |____|
	client 			 client           client
		
Leader: 
Zookeeper集群工作的核心
事务请求（写操作）的唯一调度和处理者,保证集群事务处理的顺序性;
集群内部各个服务器的调度者.
对于create，setData，delete等有写操作的请求，则需要统一转发给leader处理,
leader需要决定编号、执行操作，这个过程称为一个事务。
Follower:
处理客户端非事务（读操作）请求，转发事务请求给Leader；
参与集群Leader选举投票。
此外，针对访问量比较大的zookeeper集群，还可新增观察者角色。		
Observer:
观察者角色，观察Zookeeper集群的最新状态变化并将这些状态同步过来，
其对于非事务请求可以进行独立处理，对于事务请求，则会转发给Leader服务器进行处理。		
不会参与任何形式的投票只提供非事务服务，通常用于在不影响集群事务处理能力的前提
下提升集群的非事务处理能力。
ZooKeeper集群特征
	通常由2n+1台server组成。
	这是因为为了保证Leader选举（基于Paxos算法的实现）
	能过得到多数的支持，所以ZooKeeper集群的数量一般为奇数。
	
	Zookeeper是Java开发得

ZooKeeper集群搭建	
Linux 项目下的 ZooKeeper详细参考文档
	1. Zookeeper运行需要java环境，所以需要提前安装jdk。
	2. 配置主机名称到IP地址映射配置
	3. 修改ZooKeeper配置文件
	4. 远程复制分发安装文件
	5. 设置myid
	6. 启动ZooKeeper集群		
		
服务器IP	     主机名	myid的值
192.168.88.161	node1		1
192.168.88.162	node2		2
192.168.88.163	node3		3
启动zookeeper服务
	#启动第一台节点的 zookeeper 服务
	#在任意目录下执行
	zkServer.sh start
三台主机分别查看启动状态
zkServer.sh  status


zookeeper数据模型
	zookeeper中的节点与普通文件系统中的目录最大的区别：
		1 znode 可以兼具文件（数据、元信息、ACL、时间戳）
		和文件夹的特点
		2 znode是原子性的，要么都成功，要么都失败，
		要么都写入，要么都读取
		3 znode是有存储大小，默认限制大小是 1M .
		也可以认为设置 setquota ，实际场- 景远远不会超过1M
		4 znode通过完整的路径进行访问，不能使用相对路径，从 / 开始。
zookeeper中节点的类型
	zookeeper中节点的类型主要包括两类，永久节点和临时节点：
		临时节点：该节点的生命周期依赖于创建它们的会话。
			一旦会话结束，临时节点将被自动删除，当然可以也可
			以手动删除。临时节点不允许拥有子节点。 临时的序
			列化节点、临时的非序列化节点。
		永久节点：该节点的生命周期不依赖于会话，并且只有在客
			户端显示执行删除操作的时候，他们才能被删除。永久的
			序列化节点、永久的非序列化节点。
	在节点名称后面加上自增序列号。序列号对于此节点的父节点来说是唯一的，
	这样便会记录每个子节点创建的先后顺序。它的格式为“%10d”(10位数字，没
	有数值的数位用0补充，例如“0000000001”)
这样便会存在四种类型的Znode节点，分别对应：
   PERSISTENT：永久节点 
   EPHEMERAL：临时节点
   PERSISTENT_SEQUENTIAL：永久节点、序列化
   EPHEMERAL_SEQUENTIAL：临时节点、序列化
   

		
		
		
   
   